
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin10.8.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "Homework2"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('Homework2')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("hw2_data")
> ### * hw2_data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hw2_data
> ### Title: Random Mixture Normal Data
> ### Aliases: hw2_data
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(hw2_data)
> 
> 
> 
> cleanEx()
> nameEx("mixture")
> ### * mixture
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mixture
> ### Title: EM and Newton for Mixture Normal Parameters Estimation
> ### Aliases: mixture EM.Newton.Mixture
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> z=numeric(0)
> y=numeric(0)
> for(i in 1:1000){
+         z[i]=rbinom(1,1,0.2)
+         if(z[i]==1){
+                 y[i]=rnorm(1,10,1)
+         }else{
+                 y[i]=rnorm(1,3,1)
+         }
+ }
> mixture(y,"EM")
$mle
    lambda        mu1        mu2     sigma1     sigma2 
 0.1952954 10.1407271  2.9944845  1.0162873  1.0604041 

$stderr
     lamda        mu1        mu2     sigma1     sigma2 
0.01255642 0.07446701 0.03645731 0.09925417 0.05793492 

> 
> 
> function (y, method, maxit = NULL, tol = 1e-08, param0 = NULL) 
+ {
+     y = unlist(y)
+     n = length(y)
+     method = match.arg(method, c("EM", "newton"))
+     if (method == "EM") {
+         e = numeric(0)
+         tlam = numeric(0)
+         tmu1 = numeric(0)
+         tmu2 = numeric(0)
+         tsigma1 = numeric(0)
+         tsigma2 = numeric(0)
+         if (is.null(param0)) {
+             tlam[1] = 0.1
+             tmu1[1] = 3
+             tmu2[1] = 2
+             tsigma1[1] = 4
+             tsigma2[1] = 5
+         }
+         else {
+             tlam[1] = param0[1]
+             tmu1[1] = param0[2]
+             tmu2[1] = param0[3]
+             tsigma1[1] = param0[4]
+             tsigma2[1] = param0[5]
+         }
+         if (!is.numeric(maxit)) {
+             maxit = 500
+         }
+         for (j in 1:maxit) {
+             e = tlam[j] * dnorm(y, tmu1[j], tsigma1[j]^(1/2))/(tlam[j] * 
+                 dnorm(y, tmu1[j], tsigma1[j]^(1/2)) + (1 - tlam[j]) * 
+                 dnorm(y, tmu2[j], tsigma2[j]^(1/2)))
+             tlam[j + 1] = mean(e)
+             tmu1[j + 1] = sum(y * e)/sum(e)
+             tmu2[j + 1] = sum(y * (1 - e))/sum(1 - e)
+             tsigma1[j + 1] = sum(e * ((y - tmu1[j + 1])^2))/sum(e)
+             tsigma2[j + 1] = sum((1 - e) * ((y - tmu2[j + 1])^2))/sum(1 - 
+                 e)
+             if (sqrt((tlam[j + 1] - tlam[j])^2 + (tmu1[j + 1] - 
+                 tmu1[j])^2 + (tmu2[j + 1] - tmu2[j])^2 + (tsigma1[j + 
+                 1] - tsigma1[j])^2 + (tsigma2[j + 1] - tsigma2[j])^2) <= 
+                 tol) {
+                 break
+             }
+         }
+         lambda = tlam[j + 1]
+         mu1 = tmu1[j + 1]
+         mu2 = tmu2[j + 1]
+         sigma1 = tsigma1[j + 1]
+         sigma2 = tsigma2[j + 1]
+         l = expression(log(lambda * exp(-(y - mu1)^2/(2 * sigma1))/sqrt(2 * 
+             pi * sigma1) + (1 - lambda) * exp(-(y - mu2)^2/(2 * 
+             sigma2))/sqrt(2 * pi * sigma2)))
+         de = deriv3(l, c("lambda", "mu1", "mu2", "sigma1", "sigma2"))
+         lambda = lambda
+         mu1 = mu1
+         mu2 = mu2
+         sigma1 = sigma1
+         sigma2 = sigma2
+         grad = attr(eval(de), "gradient")
+         score = matrix(0, 5, 5)
+         for (i in 1:n) {
+             score = score + grad[i, ] %*% t(grad[i, ])
+         }
+         cov = solve(score)
+         se = c(sqrt(diag(cov)))
+         return(list(mle = c(lambda = lambda, mu1 = mu1, mu2 = mu2, 
+             sigma1 = sigma1, sigma2 = sigma2), stderr = c(lamda = se[1], 
+             mu1 = se[2], mu2 = se[3], sigma1 = se[4], sigma2 = se[5])))
+     }
+     if (method == "newton") {
+         if (is.null(param0)) {
+             temp = mixture(y, "EM")[[1]]
+             add = runif(4, -0.5, 0.5)
+             add = as.vector(cbind(runif(1, -0.05, 0.05), t(add)))
+             theta = temp + add
+         }
+         else {
+             theta = param0
+         }
+         if (!is.numeric(maxit)) {
+             maxit = 100
+         }
+         l = expression(log(lambda * exp(-(y - mu1)^2/(2 * sigma1))/sqrt(2 * 
+             pi * sigma1) + (1 - lambda) * exp(-(y - mu2)^2/(2 * 
+             sigma2))/sqrt(2 * pi * sigma2)))
+         de = deriv3(l, c("lambda", "mu1", "mu2", "sigma1", "sigma2"))
+         for (i in 1:maxit) {
+             lambda = theta[1]
+             mu1 = theta[2]
+             mu2 = theta[3]
+             sigma1 = theta[4]
+             sigma2 = theta[5]
+             grad = attr(eval(de), "gradient")
+             grad = matrix(apply(grad, 2, sum), 5, byrow = T)
+             hes = attr(eval(de), "hessian")
+             hes = data.frame(hes)
+             hes = matrix(apply(hes, 2, sum), 5, byrow = T)
+             theta = theta - solve(hes) %*% grad
+             if (sqrt(sum((solve(hes) %*% grad)^2)) <= tol) {
+                 break
+             }
+         }
+         lambda = theta[1]
+         mu1 = theta[2]
+         mu2 = theta[3]
+         sigma1 = theta[4]
+         sigma2 = theta[5]
+         grad = attr(eval(de), "gradient")
+         score = matrix(0, 5, 5)
+         for (i in 1:n) {
+             score = score + grad[i, ] %*% t(grad[i, ])
+         }
+         cov = solve(score)
+         se = c(sqrt(diag(cov)))
+         return(list(mle = c(lamda = theta[1], mu1 = theta[2], 
+             mu2 = theta[3], sigma1 = theta[4], sigma2 = theta[5]), 
+             stderr = c(lamda = se[1], mu1 = se[2], mu2 = se[3], 
+                 sigma1 = se[4], sigma2 = se[5])))
+     }
+   }
function (y, method, maxit = NULL, tol = 1e-08, param0 = NULL) 
{
    y = unlist(y)
    n = length(y)
    method = match.arg(method, c("EM", "newton"))
    if (method == "EM") {
        e = numeric(0)
        tlam = numeric(0)
        tmu1 = numeric(0)
        tmu2 = numeric(0)
        tsigma1 = numeric(0)
        tsigma2 = numeric(0)
        if (is.null(param0)) {
            tlam[1] = 0.1
            tmu1[1] = 3
            tmu2[1] = 2
            tsigma1[1] = 4
            tsigma2[1] = 5
        }
        else {
            tlam[1] = param0[1]
            tmu1[1] = param0[2]
            tmu2[1] = param0[3]
            tsigma1[1] = param0[4]
            tsigma2[1] = param0[5]
        }
        if (!is.numeric(maxit)) {
            maxit = 500
        }
        for (j in 1:maxit) {
            e = tlam[j] * dnorm(y, tmu1[j], tsigma1[j]^(1/2))/(tlam[j] * 
                dnorm(y, tmu1[j], tsigma1[j]^(1/2)) + (1 - tlam[j]) * 
                dnorm(y, tmu2[j], tsigma2[j]^(1/2)))
            tlam[j + 1] = mean(e)
            tmu1[j + 1] = sum(y * e)/sum(e)
            tmu2[j + 1] = sum(y * (1 - e))/sum(1 - e)
            tsigma1[j + 1] = sum(e * ((y - tmu1[j + 1])^2))/sum(e)
            tsigma2[j + 1] = sum((1 - e) * ((y - tmu2[j + 1])^2))/sum(1 - 
                e)
            if (sqrt((tlam[j + 1] - tlam[j])^2 + (tmu1[j + 1] - 
                tmu1[j])^2 + (tmu2[j + 1] - tmu2[j])^2 + (tsigma1[j + 
                1] - tsigma1[j])^2 + (tsigma2[j + 1] - tsigma2[j])^2) <= 
                tol) {
                break
            }
        }
        lambda = tlam[j + 1]
        mu1 = tmu1[j + 1]
        mu2 = tmu2[j + 1]
        sigma1 = tsigma1[j + 1]
        sigma2 = tsigma2[j + 1]
        l = expression(log(lambda * exp(-(y - mu1)^2/(2 * sigma1))/sqrt(2 * 
            pi * sigma1) + (1 - lambda) * exp(-(y - mu2)^2/(2 * 
            sigma2))/sqrt(2 * pi * sigma2)))
        de = deriv3(l, c("lambda", "mu1", "mu2", "sigma1", "sigma2"))
        lambda = lambda
        mu1 = mu1
        mu2 = mu2
        sigma1 = sigma1
        sigma2 = sigma2
        grad = attr(eval(de), "gradient")
        score = matrix(0, 5, 5)
        for (i in 1:n) {
            score = score + grad[i, ] %*% t(grad[i, ])
        }
        cov = solve(score)
        se = c(sqrt(diag(cov)))
        return(list(mle = c(lambda = lambda, mu1 = mu1, mu2 = mu2, 
            sigma1 = sigma1, sigma2 = sigma2), stderr = c(lamda = se[1], 
            mu1 = se[2], mu2 = se[3], sigma1 = se[4], sigma2 = se[5])))
    }
    if (method == "newton") {
        if (is.null(param0)) {
            temp = mixture(y, "EM")[[1]]
            add = runif(4, -0.5, 0.5)
            add = as.vector(cbind(runif(1, -0.05, 0.05), t(add)))
            theta = temp + add
        }
        else {
            theta = param0
        }
        if (!is.numeric(maxit)) {
            maxit = 100
        }
        l = expression(log(lambda * exp(-(y - mu1)^2/(2 * sigma1))/sqrt(2 * 
            pi * sigma1) + (1 - lambda) * exp(-(y - mu2)^2/(2 * 
            sigma2))/sqrt(2 * pi * sigma2)))
        de = deriv3(l, c("lambda", "mu1", "mu2", "sigma1", "sigma2"))
        for (i in 1:maxit) {
            lambda = theta[1]
            mu1 = theta[2]
            mu2 = theta[3]
            sigma1 = theta[4]
            sigma2 = theta[5]
            grad = attr(eval(de), "gradient")
            grad = matrix(apply(grad, 2, sum), 5, byrow = T)
            hes = attr(eval(de), "hessian")
            hes = data.frame(hes)
            hes = matrix(apply(hes, 2, sum), 5, byrow = T)
            theta = theta - solve(hes) %*% grad
            if (sqrt(sum((solve(hes) %*% grad)^2)) <= tol) {
                break
            }
        }
        lambda = theta[1]
        mu1 = theta[2]
        mu2 = theta[3]
        sigma1 = theta[4]
        sigma2 = theta[5]
        grad = attr(eval(de), "gradient")
        score = matrix(0, 5, 5)
        for (i in 1:n) {
            score = score + grad[i, ] %*% t(grad[i, ])
        }
        cov = solve(score)
        se = c(sqrt(diag(cov)))
        return(list(mle = c(lamda = theta[1], mu1 = theta[2], 
            mu2 = theta[3], sigma1 = theta[4], sigma2 = theta[5]), 
            stderr = c(lamda = se[1], mu1 = se[2], mu2 = se[3], 
                sigma1 = se[4], sigma2 = se[5])))
    }
}
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.229 0.005 0.234 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
