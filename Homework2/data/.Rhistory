}
}
mixture(y,"EM",param0=c(0.4,5,1,5,10))
dim(y)
data=read.table("hw2_data.txt")
y=data
c(y)
dim(c(y))
z=numeric(0)
y=numeric(0)
for(i in 1:1000){
z[i]=rbinom(1,1,0.2)
if(z[i]==1){
y[i]=rnorm(1,10,1)
}else{
y[i]=rnorm(1,3,1)
}
}
dim(c(y))
y==c(y)
data=read.table("hw2_data.txt")
y=data
mixture(y,"EM",param0=c(0.4,8,6,50,200))
y=c(y)
y
View(data)
y[[1]]
y=y[[1]]
y=data
y=c(y)[[1]]
s=c(2,3,4)
c(s)
s=c(s)
s=c(s)[[1]]
y=data
y=c(y)
y=c(y)[[1]]
mixture(y,"EM",param0=c(0.4,8,6,50,200))
mixture <- function(y, method, maxit = NULL, tol = 1e-08, param0 = NULL) {
method=match.arg(method,c("EM","newton"))
##EM Algorithm
if(method=="EM"){
##Starting value
e=numeric(0)
tlam=numeric(0)
tmu1=numeric(0)
tmu2=numeric(0)
tsigma1=numeric(0)
tsigma2=numeric(0)
if(is.null(param0)){
tlam[1]=0.1
tmu1[1]=3
tmu2[1]=2
tsigma1[1]=4
tsigma2[1]=5
}else{
tlam[1]=param0[1]
tmu1[1]=param0[2]
tmu2[1]=param0[3]
tsigma1[1]=param0[4]
tsigma2[1]=param0[5]
}
if(!is.numeric(maxit)){
maxit=500
}
n=length(y)
for(j in 1:maxit){
for(i in 1:n){
e[i]=tlam[j]*dnorm(y[i],tmu1[j],tsigma1[j]^(1/2))/(tlam[j]*dnorm(y[i],tmu1[j],tsigma1[j]^(1/2))+(1-tlam[j])*dnorm(y[i],tmu2[j],tsigma2[j]^(1/2)))
}
tlam[j+1]=mean(e)
tmu1[j+1]=sum(y*e)/sum(e)
tmu2[j+1]=sum(y*(1-e))/sum(1-e)
tsigma1[j+1]=sum(e*((y-tmu1[j+1])^2))/sum(e)
tsigma2[j+1]=sum((1-e)*((y-tmu2[j+1])^2))/sum(1-e)
if(sqrt((tlam[j+1]-tlam[j])^2+(tmu1[j+1]-tmu1[j])^2+(tmu2[j+1]-tmu2[j])^2+(tsigma1[j+1]-tsigma1[j])^2+(tsigma2[j+1]-tsigma2[j])^2)<=tol){
break;
}
}
lambda=tlam[j+1]
mu1=tmu1[j+1]
mu2=tmu2[j+1]
sigma1=tsigma1[j+1]
sigma2=tsigma2[j+1]
##Information Matrix
d=deriv3(~log(lambda*exp(-(y-mu1)^2/(2*sigma1))/sqrt(2*pi*sigma1)+(1-lambda)*exp(-(y-mu2)^2/(2*sigma2))/sqrt(2*pi*sigma2)),c("lambda","mu1","mu2","sigma1","sigma2"),function.arg=TRUE)
grad=attributes(d(lambda,mu1,mu2,sigma1,sigma2))$gradient
score=matrix(0,5,5)
for(i in 1:n){
score=score+grad[i,]%*%t(grad[i,])
}
score=score*(1/n)
cov=solve(score)
se=c(sqrt(diag(cov)))
return(list(mle=c(lambda=lambda,mu1=mu1,mu2=mu2,sigma1=sigma1,sigma2=sigma2),stderr=c(lamda=se[1],mu1=se[2],mu2=se[3],sigma1=se[4],sigma2=se[5])))
}
##Newton Method
if(method=="newton"){
if(is.null(param0)){
theta=c(0.17,10.5,2.5,0.8,1.2)
}else{
theta=param0
}
if(!is.numeric(maxit)){
maxit=100
}
d=deriv3(~log(lambda*exp(-(y-mu1)^2/(2*sigma1))/sqrt(2*pi*sigma1)+(1-lambda)*exp(-(y-mu2)^2/(2*sigma2))/sqrt(2*pi*sigma2)),c("lambda","mu1","mu2","sigma1","sigma2"),function.arg=TRUE)
for(i in 1:maxit){
grad=attributes(d(theta[1],theta[2],theta[3],theta[4],theta[5]))$gradient
grad=matrix(apply(grad,2,sum),5,byrow=T)
hes=attributes(d(theta[1],theta[2],theta[3],theta[4],theta[5]))$hessian
hes=data.frame(hes)
hes=matrix(apply(hes,2,sum),5,byrow=T)
theta=theta-solve(hes)%*%grad
if(sqrt(sum(solve(hes)%*%grad)^2)<=tol){
break;
}
}
##Information Matrix
n=length(y)
grad=attributes(d(theta[1],theta[2],theta[3],theta[4],theta[5]))$gradient
score=matrix(0,5,5)
for(i in 1:n){
score=score+grad[i,]%*%t(grad[i,])
}
score=score*(1/n)
cov=solve(score)
se=c(sqrt(diag(cov)))
return(list(mle=c(lamda=theta[1],mu1=theta[2],mu2=theta[3],sigma1=theta[4],sigma2=theta[5]),stderr=c(lamda=se[1],mu1=se[2],mu2=se[3],sigma1=se[4],sigma2=se[5])))
}
}
mixture(y,"EM",param0=c(0.4,8,6,50,200))
mixture(y,"newton")
mixture(y,"EM",param0=c(0.4,8,6,50,200))
mixture(y,"newton")
mixture <- function(y, method, maxit = NULL, tol = 1e-08, param0 = NULL) {
method=match.arg(method,c("EM","newton"))
##EM Algorithm
if(method=="EM"){
##Starting value
e=numeric(0)
tlam=numeric(0)
tmu1=numeric(0)
tmu2=numeric(0)
tsigma1=numeric(0)
tsigma2=numeric(0)
if(is.null(param0)){
tlam[1]=0.1
tmu1[1]=3
tmu2[1]=2
tsigma1[1]=4
tsigma2[1]=5
}else{
tlam[1]=param0[1]
tmu1[1]=param0[2]
tmu2[1]=param0[3]
tsigma1[1]=param0[4]
tsigma2[1]=param0[5]
}
if(!is.numeric(maxit)){
maxit=500
}
n=length(y)
for(j in 1:maxit){
for(i in 1:n){
e[i]=tlam[j]*dnorm(y[i],tmu1[j],tsigma1[j]^(1/2))/(tlam[j]*dnorm(y[i],tmu1[j],tsigma1[j]^(1/2))+(1-tlam[j])*dnorm(y[i],tmu2[j],tsigma2[j]^(1/2)))
}
tlam[j+1]=mean(e)
tmu1[j+1]=sum(y*e)/sum(e)
tmu2[j+1]=sum(y*(1-e))/sum(1-e)
tsigma1[j+1]=sum(e*((y-tmu1[j+1])^2))/sum(e)
tsigma2[j+1]=sum((1-e)*((y-tmu2[j+1])^2))/sum(1-e)
if(sqrt((tlam[j+1]-tlam[j])^2+(tmu1[j+1]-tmu1[j])^2+(tmu2[j+1]-tmu2[j])^2+(tsigma1[j+1]-tsigma1[j])^2+(tsigma2[j+1]-tsigma2[j])^2)<=tol){
break;
}
}
lambda=tlam[j+1]
mu1=tmu1[j+1]
mu2=tmu2[j+1]
sigma1=tsigma1[j+1]
sigma2=tsigma2[j+1]
##Information Matrix
d=deriv3(~log(lambda*exp(-(y-mu1)^2/(2*sigma1))/sqrt(2*pi*sigma1)+(1-lambda)*exp(-(y-mu2)^2/(2*sigma2))/sqrt(2*pi*sigma2)),c("lambda","mu1","mu2","sigma1","sigma2"),function.arg=TRUE)
grad=attributes(d(lambda,mu1,mu2,sigma1,sigma2))$gradient
score=matrix(0,5,5)
for(i in 1:n){
score=score+grad[i,]%*%t(grad[i,])
}
score=score*(1/n)
cov=solve(score)
se=c(sqrt(diag(cov)))
return(list(mle=c(lambda=lambda,mu1=mu1,mu2=mu2,sigma1=sigma1,sigma2=sigma2),stderr=c(lamda=se[1],mu1=se[2],mu2=se[3],sigma1=se[4],sigma2=se[5])))
}
##Newton Method
if(method=="newton"){
if(is.null(param0)){
theta=c(0.17,10.5,2.5,0.8,1.2)
}else{
theta=param0
}
if(!is.numeric(maxit)){
maxit=100
}
d=deriv3(~log(lambda*exp(-(y-mu1)^2/(2*sigma1))/sqrt(2*pi*sigma1)+(1-lambda)*exp(-(y-mu2)^2/(2*sigma2))/sqrt(2*pi*sigma2)),c("lambda","mu1","mu2","sigma1","sigma2"),function.arg=TRUE)
for(i in 1:maxit){
grad=attributes(d(theta[1],theta[2],theta[3],theta[4],theta[5]))$gradient
grad=matrix(apply(grad,2,sum),5,byrow=T)
hes=attributes(d(theta[1],theta[2],theta[3],theta[4],theta[5]))$hessian
hes=data.frame(hes)
hes=matrix(apply(hes,2,sum),5,byrow=T)
theta=theta-solve(hes)%*%grad
#if(sqrt(sum(solve(hes)%*%grad)^2)<=tol){
#        break;
#}
}
##Information Matrix
n=length(y)
grad=attributes(d(theta[1],theta[2],theta[3],theta[4],theta[5]))$gradient
score=matrix(0,5,5)
for(i in 1:n){
score=score+grad[i,]%*%t(grad[i,])
}
score=score*(1/n)
cov=solve(score)
se=c(sqrt(diag(cov)))
return(list(mle=c(lamda=theta[1],mu1=theta[2],mu2=theta[3],sigma1=theta[4],sigma2=theta[5]),stderr=c(lamda=se[1],mu1=se[2],mu2=se[3],sigma1=se[4],sigma2=se[5])))
}
}
mixture(y,"newton")
mixture <- function(y, method, maxit = NULL, tol = 1e-08, param0 = NULL) {
method=match.arg(method,c("EM","newton"))
##EM Algorithm
if(method=="EM"){
##Starting value
e=numeric(0)
tlam=numeric(0)
tmu1=numeric(0)
tmu2=numeric(0)
tsigma1=numeric(0)
tsigma2=numeric(0)
if(is.null(param0)){
tlam[1]=0.1
tmu1[1]=3
tmu2[1]=2
tsigma1[1]=4
tsigma2[1]=5
}else{
tlam[1]=param0[1]
tmu1[1]=param0[2]
tmu2[1]=param0[3]
tsigma1[1]=param0[4]
tsigma2[1]=param0[5]
}
if(!is.numeric(maxit)){
maxit=500
}
n=length(y)
for(j in 1:maxit){
for(i in 1:n){
e[i]=tlam[j]*dnorm(y[i],tmu1[j],tsigma1[j]^(1/2))/(tlam[j]*dnorm(y[i],tmu1[j],tsigma1[j]^(1/2))+(1-tlam[j])*dnorm(y[i],tmu2[j],tsigma2[j]^(1/2)))
}
tlam[j+1]=mean(e)
tmu1[j+1]=sum(y*e)/sum(e)
tmu2[j+1]=sum(y*(1-e))/sum(1-e)
tsigma1[j+1]=sum(e*((y-tmu1[j+1])^2))/sum(e)
tsigma2[j+1]=sum((1-e)*((y-tmu2[j+1])^2))/sum(1-e)
if(sqrt((tlam[j+1]-tlam[j])^2+(tmu1[j+1]-tmu1[j])^2+(tmu2[j+1]-tmu2[j])^2+(tsigma1[j+1]-tsigma1[j])^2+(tsigma2[j+1]-tsigma2[j])^2)<=tol){
break;
}
}
lambda=tlam[j+1]
mu1=tmu1[j+1]
mu2=tmu2[j+1]
sigma1=tsigma1[j+1]
sigma2=tsigma2[j+1]
##Information Matrix
d=deriv3(~log(lambda*exp(-(y-mu1)^2/(2*sigma1))/sqrt(2*pi*sigma1)+(1-lambda)*exp(-(y-mu2)^2/(2*sigma2))/sqrt(2*pi*sigma2)),c("lambda","mu1","mu2","sigma1","sigma2"),function.arg=TRUE)
grad=attributes(d(lambda,mu1,mu2,sigma1,sigma2))$gradient
score=matrix(0,5,5)
for(i in 1:n){
score=score+grad[i,]%*%t(grad[i,])
}
score=score*(1/n)
cov=solve(score)
se=c(sqrt(diag(cov)))
return(list(mle=c(lambda=lambda,mu1=mu1,mu2=mu2,sigma1=sigma1,sigma2=sigma2),stderr=c(lamda=se[1],mu1=se[2],mu2=se[3],sigma1=se[4],sigma2=se[5])))
}
##Newton Method
if(method=="newton"){
if(is.null(param0)){
theta=c(0.5,10.5,20.8,60,250)
}else{
theta=param0
}
if(!is.numeric(maxit)){
maxit=100
}
d=deriv3(~log(lambda*exp(-(y-mu1)^2/(2*sigma1))/sqrt(2*pi*sigma1)+(1-lambda)*exp(-(y-mu2)^2/(2*sigma2))/sqrt(2*pi*sigma2)),c("lambda","mu1","mu2","sigma1","sigma2"),function.arg=TRUE)
for(i in 1:maxit){
grad=attributes(d(theta[1],theta[2],theta[3],theta[4],theta[5]))$gradient
grad=matrix(apply(grad,2,sum),5,byrow=T)
hes=attributes(d(theta[1],theta[2],theta[3],theta[4],theta[5]))$hessian
hes=data.frame(hes)
hes=matrix(apply(hes,2,sum),5,byrow=T)
theta=theta-solve(hes)%*%grad
#if(sqrt(sum(solve(hes)%*%grad)^2)<=tol){
#        break;
#}
}
##Information Matrix
n=length(y)
grad=attributes(d(theta[1],theta[2],theta[3],theta[4],theta[5]))$gradient
score=matrix(0,5,5)
for(i in 1:n){
score=score+grad[i,]%*%t(grad[i,])
}
score=score*(1/n)
cov=solve(score)
se=c(sqrt(diag(cov)))
return(list(mle=c(lamda=theta[1],mu1=theta[2],mu2=theta[3],sigma1=theta[4],sigma2=theta[5]),stderr=c(lamda=se[1],mu1=se[2],mu2=se[3],sigma1=se[4],sigma2=se[5])))
}
}
mixture(y,"newton")
mixture(y,"EM",param0=c(0.4,8,6,50,200))
mixture <- function(y, method, maxit = NULL, tol = 1e-08, param0 = NULL) {
method=match.arg(method,c("EM","newton"))
##EM Algorithm
if(method=="EM"){
##Starting value
e=numeric(0)
tlam=numeric(0)
tmu1=numeric(0)
tmu2=numeric(0)
tsigma1=numeric(0)
tsigma2=numeric(0)
if(is.null(param0)){
tlam[1]=0.1
tmu1[1]=3
tmu2[1]=2
tsigma1[1]=4
tsigma2[1]=5
}else{
tlam[1]=param0[1]
tmu1[1]=param0[2]
tmu2[1]=param0[3]
tsigma1[1]=param0[4]
tsigma2[1]=param0[5]
}
if(!is.numeric(maxit)){
maxit=500
}
n=length(y)
for(j in 1:maxit){
for(i in 1:n){
e[i]=tlam[j]*dnorm(y[i],tmu1[j],tsigma1[j]^(1/2))/(tlam[j]*dnorm(y[i],tmu1[j],tsigma1[j]^(1/2))+(1-tlam[j])*dnorm(y[i],tmu2[j],tsigma2[j]^(1/2)))
}
tlam[j+1]=mean(e)
tmu1[j+1]=sum(y*e)/sum(e)
tmu2[j+1]=sum(y*(1-e))/sum(1-e)
tsigma1[j+1]=sum(e*((y-tmu1[j+1])^2))/sum(e)
tsigma2[j+1]=sum((1-e)*((y-tmu2[j+1])^2))/sum(1-e)
if(sqrt((tlam[j+1]-tlam[j])^2+(tmu1[j+1]-tmu1[j])^2+(tmu2[j+1]-tmu2[j])^2+(tsigma1[j+1]-tsigma1[j])^2+(tsigma2[j+1]-tsigma2[j])^2)<=tol){
break;
}
}
lambda=tlam[j+1]
mu1=tmu1[j+1]
mu2=tmu2[j+1]
sigma1=tsigma1[j+1]
sigma2=tsigma2[j+1]
##Information Matrix
d=deriv3(~log(lambda*exp(-(y-mu1)^2/(2*sigma1))/sqrt(2*pi*sigma1)+(1-lambda)*exp(-(y-mu2)^2/(2*sigma2))/sqrt(2*pi*sigma2)),c("lambda","mu1","mu2","sigma1","sigma2"),function.arg=TRUE)
grad=attributes(d(lambda,mu1,mu2,sigma1,sigma2))$gradient
score=matrix(0,5,5)
for(i in 1:n){
score=score+grad[i,]%*%t(grad[i,])
}
score=score*(1/n)
cov=solve(score)
se=c(sqrt(diag(cov)))
return(list(mle=c(lambda=lambda,mu1=mu1,mu2=mu2,sigma1=sigma1,sigma2=sigma2),stderr=c(lamda=se[1],mu1=se[2],mu2=se[3],sigma1=se[4],sigma2=se[5])))
}
##Newton Method
if(method=="newton"){
if(is.null(param0)){
theta=c(0.5,10.5,20.8,60,250)
}else{
theta=param0
}
if(!is.numeric(maxit)){
maxit=100
}
d=deriv3(~log(lambda*exp(-(y-mu1)^2/(2*sigma1))/sqrt(2*pi*sigma1)+(1-lambda)*exp(-(y-mu2)^2/(2*sigma2))/sqrt(2*pi*sigma2)),c("lambda","mu1","mu2","sigma1","sigma2"),function.arg=TRUE)
for(i in 1:maxit){
grad=attributes(d(theta[1],theta[2],theta[3],theta[4],theta[5]))$gradient
grad=matrix(apply(grad,2,sum),5,byrow=T)
hes=attributes(d(theta[1],theta[2],theta[3],theta[4],theta[5]))$hessian
hes=data.frame(hes)
hes=matrix(apply(hes,2,sum),5,byrow=T)
theta=theta-solve(hes)%*%grad
if(sqrt(sum((solve(hes)%*%grad)^2))<=tol){
break;
}
}
##Information Matrix
n=length(y)
grad=attributes(d(theta[1],theta[2],theta[3],theta[4],theta[5]))$gradient
score=matrix(0,5,5)
for(i in 1:n){
score=score+grad[i,]%*%t(grad[i,])
}
score=score*(1/n)
cov=solve(score)
se=c(sqrt(diag(cov)))
return(list(mle=c(lamda=theta[1],mu1=theta[2],mu2=theta[3],sigma1=theta[4],sigma2=theta[5]),stderr=c(lamda=se[1],mu1=se[2],mu2=se[3],sigma1=se[4],sigma2=se[5])))
}
}
mixture(y,"newton")
mixture <- function(y, method, maxit = NULL, tol = 1e-08, param0 = NULL) {
method=match.arg(method,c("EM","newton"))
##EM Algorithm
if(method=="EM"){
##Starting value
e=numeric(0)
tlam=numeric(0)
tmu1=numeric(0)
tmu2=numeric(0)
tsigma1=numeric(0)
tsigma2=numeric(0)
if(is.null(param0)){
tlam[1]=0.1
tmu1[1]=3
tmu2[1]=2
tsigma1[1]=4
tsigma2[1]=5
}else{
tlam[1]=param0[1]
tmu1[1]=param0[2]
tmu2[1]=param0[3]
tsigma1[1]=param0[4]
tsigma2[1]=param0[5]
}
if(!is.numeric(maxit)){
maxit=500
}
n=length(y)
for(j in 1:maxit){
for(i in 1:n){
e[i]=tlam[j]*dnorm(y[i],tmu1[j],tsigma1[j]^(1/2))/(tlam[j]*dnorm(y[i],tmu1[j],tsigma1[j]^(1/2))+(1-tlam[j])*dnorm(y[i],tmu2[j],tsigma2[j]^(1/2)))
}
tlam[j+1]=mean(e)
tmu1[j+1]=sum(y*e)/sum(e)
tmu2[j+1]=sum(y*(1-e))/sum(1-e)
tsigma1[j+1]=sum(e*((y-tmu1[j+1])^2))/sum(e)
tsigma2[j+1]=sum((1-e)*((y-tmu2[j+1])^2))/sum(1-e)
if(sqrt((tlam[j+1]-tlam[j])^2+(tmu1[j+1]-tmu1[j])^2+(tmu2[j+1]-tmu2[j])^2+(tsigma1[j+1]-tsigma1[j])^2+(tsigma2[j+1]-tsigma2[j])^2)<=tol){
break;
}
}
lambda=tlam[j+1]
mu1=tmu1[j+1]
mu2=tmu2[j+1]
sigma1=tsigma1[j+1]
sigma2=tsigma2[j+1]
##Information Matrix
d=deriv3(~log(lambda*exp(-(y-mu1)^2/(2*sigma1))/sqrt(2*pi*sigma1)+(1-lambda)*exp(-(y-mu2)^2/(2*sigma2))/sqrt(2*pi*sigma2)),c("lambda","mu1","mu2","sigma1","sigma2"),function.arg=TRUE)
grad=attributes(d(lambda,mu1,mu2,sigma1,sigma2))$gradient
score=matrix(0,5,5)
for(i in 1:n){
score=score+grad[i,]%*%t(grad[i,])
}
#score=score*(1/n)
cov=solve(score)
se=c(sqrt(diag(cov)))
return(list(mle=c(lambda=lambda,mu1=mu1,mu2=mu2,sigma1=sigma1,sigma2=sigma2),stderr=c(lamda=se[1],mu1=se[2],mu2=se[3],sigma1=se[4],sigma2=se[5])))
}
##Newton Method
if(method=="newton"){
if(is.null(param0)){
theta=c(0.5,10.5,20.8,60,250)
}else{
theta=param0
}
if(!is.numeric(maxit)){
maxit=100
}
d=deriv3(~log(lambda*exp(-(y-mu1)^2/(2*sigma1))/sqrt(2*pi*sigma1)+(1-lambda)*exp(-(y-mu2)^2/(2*sigma2))/sqrt(2*pi*sigma2)),c("lambda","mu1","mu2","sigma1","sigma2"),function.arg=TRUE)
for(i in 1:maxit){
grad=attributes(d(theta[1],theta[2],theta[3],theta[4],theta[5]))$gradient
grad=matrix(apply(grad,2,sum),5,byrow=T)
hes=attributes(d(theta[1],theta[2],theta[3],theta[4],theta[5]))$hessian
hes=data.frame(hes)
hes=matrix(apply(hes,2,sum),5,byrow=T)
theta=theta-solve(hes)%*%grad
if(sqrt(sum((solve(hes)%*%grad)^2))<=tol){
break;
}
}
##Information Matrix
n=length(y)
grad=attributes(d(theta[1],theta[2],theta[3],theta[4],theta[5]))$gradient
score=matrix(0,5,5)
for(i in 1:n){
score=score+grad[i,]%*%t(grad[i,])
}
score=score*(1/n)
cov=solve(score)
se=c(sqrt(diag(cov)))
return(list(mle=c(lamda=theta[1],mu1=theta[2],mu2=theta[3],sigma1=theta[4],sigma2=theta[5]),stderr=c(lamda=se[1],mu1=se[2],mu2=se[3],sigma1=se[4],sigma2=se[5])))
}
}
mixture(y,"EM",param0=c(0.4,8,6,50,200))
